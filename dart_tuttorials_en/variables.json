{
    "items": [
        {
            "text": "*~{fontSize:32}Dart Variables~*\n\n*Summary:* in this tutorial, you’ll learn about Dart variables and how to use them to store and manage data effectively.\n\n*Introduction to Dart variables*\n\nIn programming, you need to manage values like numbers, strings, and booleans. To store these values in programs, you use variables.\n\nA variable is an identifier that stores a value of a specific type. By definition, a variable is associated with a type and has a name.\n\n~{fontSize:32}Declaring variables~\n\nThe following syntax illustrates how to declare a variable:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "type variableName;",
            "title": "Dart",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "In this syntax, the ~{color:red}type~ specifies the values that the variable can store. Since Dart is a statically typed language, you need to explicitly specify the type of the variable.\n\nThe following shows some common types in Dart:\n\n   - ~{color:red}int~ – represents whole numbers like ~{color:red}-1~, ~{color:red}0~, ~{color:red}1~, ~{color:red}2~.\n   - ~{color:red}double~ – represents practical values like ~{color:red}0.5~, and ~{color:red}9.98~.\n   - ~{color:red}String~ – represents text such as ~{color:red}\"Good Morning!\"~.\n   - ~{color:red}bool~ – represents Boolean values including ~{color:red}true~ and ~{color:red}false~.\nBy convention, the variable name use ~{color:red}lowerCaseCamel~. It means that you should capitalize the first letter of each word except the first word, and use no separators. Also, you should name the variables as descriptive as possible.\n\nThe following example declares a variable with the integer type:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "void main() {\n  int httpStatusCode;\n}",
            "title": "Dart",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "Assigning a value to a variable\n\nTo assign a value to a variable, you use the assignment operator (=). For example, the following assigns 200 to the httpStatusCode variable:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "void main() {\n  int httpStatusCode;\n  httpStatusCode = 200;\n}",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "To make it shorter, you can both declare a variable and initialize its value using a single statement like this:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "void main() {\n  int httpStatusCode = 200;\n}",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "Once you assign a value to a variable, you can use it. For example, the following displays the value of the httpStatusCode variable:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "void main() {\n  int httpStatusCode = 200;\n  print('httpStatusCode: $httpStatusCode');\n}",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "code_path": "httpStatusCode: 200",
            "title": "Output",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "Note that if you use a variable that has not been initialized or assigned, you’ll get a compilation error.\n\nAssigning a variable to another\n\nDart allows you to assign a variable to another:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "variableName = anotherVariable;",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "code_path": "void main() {\n  int httpStatusCode = 200;\n  int response = httpStatusCode;\n\n  print('response: $response');\n}",
            "title": "For example:",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "code_path": "response: 200",
            "title": "Output:",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "How it works.\n\nFirst, declare the httpStatusCode variable and initialize its value to 200:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "int httpStatusCode = 200;",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "Second, declare the response variable and assign the httpStatusCode to the response variable:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "int response = httpStatusCode;",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "Third, display the value of the response variable:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "print('response: $response');",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "Note that the response and httpStatusCode has the same value. However, if you change the value of httpStatusCode variable, it won’t affect the response variable. For example:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "void main() {\n  int httpStatusCode = 200;\n  int response = httpStatusCode;\n  print('httpStatusCode: $httpStatusCode,response: $response');\n\n  httpStatusCode = 500;\n  print('httpStatusCode: $httpStatusCode,response: $response');\n}",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "code_path": "httpStatusCode: 200,response: 200\nhttpStatusCode: 500,response: 200",
            "title": "Output:",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text": "In this example:\n\nFirst, assign the httpStatusCode to the response variable. Both variables hold the same value 200:",
            "button_is": "false",
            "text_is": "true",
            "code": "false",
            "image_is": "false"
        },
        {
            "code_path": "int httpStatusCode = 200;\nint response = httpStatusCode;\nprint('httpStatusCode: $httpStatusCode,response: $response');",
            "title": "",
            "button_is": "false",
            "text_is": "false",
            "code": "true",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "Second, assign 500 to the httpStatusCode and display the values of both variables:",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "httpStatusCode = 500;\nprint('httpStatusCode: $httpStatusCode,response: $response');",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "The output shows that changing the value of the response variable doesn’t affect the httpStatusCode variable.\n\nIf you have multiple variables with the same type, you can declare them all using a single statement. For example:",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "int httpStatusCode, response;",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "In this example, both httpStatusCode and response are integer variables. It uses a comma (,) to separate between the variables.\n\n~{fontSize:32}Type inference~\n\nIf you declare a variable and initialize its value at the same time as the following example, the Dart compiler will understand that 200 is an integer.",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "int httpStatusCode = 200;",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "Therefore, you don’t need to specify the type of the httpStatusCode variable explicitly. Instead, you can use the var keyword:",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "var httpStatusCode = 200;",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "In this case, the Dart compiler will infer the type of the httpStatusCode variable as an integer. This feature is called type inference in Dart.\n\nSimilarly, you can define a variable that holds a string without type inference like this:",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "String message = \"OK\";",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "Or you can use the type inference as follows:",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "var message = \"OK\";",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "The type inference also works if you assign a variable to another:",
            "image_is": "false"
        },
        {
            "text_is": "false",
            "code": "true",
            "title": "",
            "code_path": "var message = \"OK\";\nvar response = message;",
            "button_is": "false",
            "image_is": "false"
        },
        {
            "text_is": "true",
            "code": "false",
            "button_is": "false",
            "text": "Summary\n\n   - A variable is an identifier in the program that holds a value of a specific type. The value of the variables can be changed throughout the program.v",
            "image_is": "false"
        }
    ]
}
